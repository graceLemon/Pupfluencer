import React, {useRef, useState} from 'react';
import {
  Dimensions,
  View,
  Text,
  StyleSheet,
  Button,
  TextInput,
  FlatList,
  Image,
  TouchableOpacity,
  SafeAreaView,
  ScrollView,
} from 'react-native';

import MultipleImagePicker from '@baronha/react-native-multiple-image-picker';
import fs from 'react-native-fs';

import YellowButton from '../components/YellowButton';
import CancelButton from '../components/CancelButton';
import {useDispatch} from 'react-redux';
import {__postAddContentFormData} from '../redux/modules/addContentSlice';

const AddContent = () => {
  // Ï†úÎ™© Ïù∏ÌíãÏÉÅÌÉú
  const [titleText, setTitleText] = useState();
  //Ï†úÎ™© Ïù∏Ìíã Ìï∏Îì§Îü¨
  const titleTextHandler = event => {
    console.log('Ï†úÎ™©', event.nativeEvent.text);
    setTitleText(event.nativeEvent.text);
  };
  // ÎÇ¥Ïö© Ïù∏ÌíãÏÉÅÌÉú
  const [contentText, setContentText] = useState('');

  // ÎÇ¥Ïö© Ïù∏Ìíã Ìï∏Îì§Îü¨
  const contentTextHandler = event => {
    console.log('ÎÇ¥Ïö©', event.nativeEvent.text);

    setContentText(event.nativeEvent.text);
  };

  // * ÏÇ¨ÏßÑÍ¥ÄÎ†® ÏΩîÎìú
  const [images, setImages] = useState([]);
  // ÏÇ¨ÏßÑÎÑ£Í∏∞ Î≤ÑÌäº ÌÅ¥Î¶≠Ïãú ÏûëÎèôÌïòÎäî Ïù¥Î≤§Ìä∏
  const openPicker = async () => {
    try {
      const response = await MultipleImagePicker.openPicker({
        usedCameraButton: true,
        mediaType: 'image',

        // Ï¥ù ÏÑ†ÌÉù Í∞ÄÎä•Ìïú Î™®Îì†ÌååÏùº Ïàò
        maxSelectedAssets: 5,
        // Ï¥ù ÏÑ†ÌÉù Í∞ÄÎä•Ìïú ÏòÅÏÉÅ Ïàò
        // maxVideo: 1,
        selectedAssets: images,
        isExportThumbnail: true,
        isCrop: true,
        isCropCircle: true,
        //singleSelectedMode: true,
      });

      // console.log('response: ', response);
      setImages(response);
    } catch (e) {
      // console.log(e.code, e.message);
    }
  };
  //remove ÎùºÎäî Ïù¥Î¶ÑÏùÑ ÎßéÏù¥ Ïì¥Îã§Í≥† ÌïúÎã§.

  const onDelete = value => {
    const data = images.filter(
      item =>
        item?.localIdentifier &&
        item?.localIdentifier !== value?.localIdentifier,
    );
    setImages(data);
  };
  // ÏÇ¨ÏßÑ Ï∂úÎ†•
  //Ï∂úÎ†•ÎêòÎäî ÏÇ¨ÏßÑÎì§Ïóê Í∞ÅÍ∞Å ÏÇ≠Ï†úÎ≤ÑÌäºÏùÑ ÎßåÎì§Ïñ¥ Ï§å.
  const renderItem = ({item, index}) => {
    return (
      <ScrollView style={styles.imageView}>
        <Image
          width={IMAGE_WIDTH}
          source={{
            uri:
              item?.type === 'video'
                ? 'file://' + (item?.crop?.cropPath ?? item.realPath)
                : 'file://' + (item?.crop?.cropPath ?? item.realPath),
          }}
          style={styles.media}
        />
        <TouchableOpacity
          onPress={() => onDelete(item)}
          activeOpacity={0.9}
          style={styles.buttonDelete}>
          <Text style={styles.titleDelete}>X</Text>
        </TouchableOpacity>
      </ScrollView>
    );
  };

  //forÎ¨∏ÏùÑ ÎèåÎ¶∞Îã§??
  const dispatch = useDispatch();

  // ÌèºÎç∞Ïù¥ÌÑ∞ Î≥¥ÎÇº Îïå, uri, type(mime), fileName Îßå Î≥¥ÎÇ¥Î©¥ ÎêúÎã§Í≥† ÎÇòÏôÄÏûàÎäîÎç∞.. Ïôú ÏïàÎê†Íπå? „Ö†„Ö†
  const formData = new FormData();
  const onSendFormData = () => {
    console.log('images', images);
    //ÏÑúÎ≤ÑÎ∂ÑÎì§Ïù¥Îûë ÏñòÍ∏∞Ìï¥Î≥¥Í∏∞! imagesÏïàÏóê Îç∞Ïù¥ÌÑ∞Í∞Ä ÏûàÎäîÎç∞,
    console.log('images.real', images[0].realPath);
    const formList = {
      category: 'image',
      title: titleText,
      content: contentText,
      // imagesÏïàÏóê Ïù¥ÎØ∏ÏßÄ Î∞∞Ïó¥Ïù¥ Îì§Ïñ¥ÏûàÏùå. Í∑∏Í±∞ Ïñ¥ÎñªÍ≤å Î∂ÑÌï¥Ìï¥ÏÑú ÎÑòÍ∏∏Í±¥ÏßÄ, Ïñ¥Î†µÎã§.
      // Í∑∏ÎãàÍπå ÏÑúÎ≤ÑÎ∂ÑÎì§ÌïúÌÖå Î∂ÄÌÉÅÌïòÍ∏∞„Öé„Öé
      files: images,
    };
    //images.map(image => {});

    formData.append('category', 'image');
    formData.append('title', titleText);
    formData.append('content', contentText);
    //formData.append('files', images[0].realPath);
    formData.append('files', {
      name: images[0].filename,
      type: 'multipart/form-data',
      uri: images[0].path,
    });
    dispatch(__postAddContentFormData(formData));
  };

  return (
    <SafeAreaView style={styles.containerBox}>
      <View style={styles.box}>
        <View style={styles.container}>
          <View style={styles.titleInput}>
            <TextInput
              placeholder="Ï†úÎ™©ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
              // returnKeyType="next"
              value={titleText}
              onChange={titleTextHandler}
            />
          </View>

          <View style={styles.contentInput}>
            <TextInput
              placeholder="ÎÇ¥Ïö©ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
              maxLength={300}
              // ÌôïÏù∏ÌïòÍ∏∞
              multiline={true}
              value={contentText}
              onChange={contentTextHandler}
            />
          </View>
          <View>
            <Text>{contentText.length}/100</Text>
          </View>
          <View style={styles.fileInput}>
            <View style={styles.fileupload}>
              <TouchableOpacity style={styles.openPicker} onPress={openPicker}>
                <Text style={styles.openText}>ÎåïÎåïüê∂ ÏÇ¨ÏßÑÎÑ£Í∏∞</Text>
              </TouchableOpacity>
            </View>

            <FlatList
              data={images}
              keyExtractor={(item, index) =>
                (item?.filename ?? item?.path) + index
              }
              renderItem={renderItem}
              horizontal={true}
            />
          </View>
          <View style={styles.buttonRow}>
            <CancelButton>Cancel</CancelButton>
            <YellowButton onPress={onSendFormData}>Done</YellowButton>
          </View>
        </View>
      </View>
    </SafeAreaView>
  );
};

export default AddContent;

// ÏΩîÎìú ÏÜêÎ≥¥Í∏∞
// const {width} = Dimensions.get('window');

const IMAGE_WIDTH = 100;

const styles = StyleSheet.create({
  containerBox: {
    flex: 1,
  },
  box: {
    flex: 1,
    backgroundColor: '#e6e6e6',
    alignContent: 'center',
    justifyContent: 'center',
  },
  container: {
    flex: 1,
  },
  titleInput: {
    flex: 1,
    border: 1,
    borderColor: '#ffac53',
  },
  contentInput: {
    flex: 3,
  },
  fileInput: {
    flex: 2,
    flexDirection: 'row',
    flexWrap: 'nowrap',
    justifyContent: 'center',
    alignItems: 'center',
  },
  fileupload: {
    height: IMAGE_WIDTH,
    justifyContent: 'center',
    alignItems: 'center',
    marginTop: 30,
  },
  buttonRow: {
    flex: 1,
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
  },
  openText: {
    fontWeight: 'bold',
    fontSize: 16,
    color: '#fff',
    paddingVertical: 12,
  },

  openPicker: {
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#000',
  },
  imageView: {
    flexDirection: 'column',
    flexWrap: 'nowrap',
    position: 'relative',
    marginRight: 6,
  },
  media: {
    width: IMAGE_WIDTH,
    height: IMAGE_WIDTH,
    backgroundColor: 'rgba(0,0,0,0.2)',
  },
  buttonDelete: {
    paddingHorizontal: 8,
    paddingVertical: 3,
    position: 'absolute',
    right: 4,
    top: 4,
    marginTop: 3,
    width: 22,
    height: 22,
    backgroundColor: '#ffffff92',
    borderRadius: 4,
  },
  titleDelete: {
    fontWeight: 'bold',
    fontSize: 12,
    color: '#000',
  },
});
